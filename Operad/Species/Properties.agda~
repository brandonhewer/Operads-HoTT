{-# OPTIONS --cubical --no-import-sorts --safe #-}

module Operad.Species.Properties where

open import Cubical.Data.Empty renaming (rec to ⊥-rec)
open import Cubical.Data.Nat
open import Cubical.Data.Sum
open import Cubical.Data.Unit renaming (Unit to ⊤)

open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure

open import Cubical.Relation.Nullary

open import Operad.FinSet.Base
open import Operad.Species.Base
open import Operad.Species.Morphism

private
  variable
    i : HLevel
    ℓ₁ ℓ₂ ℓ₃ : Level

  Add* : ℕ → (FinSet ℓ₁ → Type ℓ₂) → FinSet ℓ₁ → Type ℓ₂
  Add* n K X with discreteℕ n (card X)
  Add* n K X | yes p = K X ⊎ ⊤
  Add* n K X | no ¬p = K X

  hAdd* : ℕ → (K : Species (suc (suc i)) ℓ₁ ℓ₂) → Species (suc (suc i)) ℓ₁ ℓ₂
  hAdd* n K X with discreteℕ n (card X)
  hAdd* {i} n K X | yes p =
    (typ (K X) ⊎ ⊤) ,
    isOfHLevelSum _ (str (K X)) (isProp→isOfHLevelSuc (suc i) isPropUnit)
  hAdd*     n K X | no ¬p = K X

toSpecies : (K : FinSet ℓ₁ → Type ℓ₂) (P : ∀ A → K A → Type ℓ₃) →
            (∀ A k → isProp (P A k)) → Species 1 ℓ₁ _
toSpecies K P isPropP A = ((k : K A) → P A k) , isPropΠ λ _ → isPropP _ _

hFree* : ∀ n → Species (suc (suc i)) ℓ₁ ℓ₂ → *Species (suc (suc i)) ℓ₁ ℓ₂ n
hFree* n K X with discreteℕ n (card X)
hFree* {i} n K X | yes p =
  ((typ (K X) ⊎ ⊤) ,
   isOfHLevelSum _ (str (K X)) (isProp→isOfHLevelSuc (suc i) isPropUnit)) ,
  λ p → inr _
hFree* n K X | no ¬p = K X , ⊥-rec ∘ ¬p

Free* : ∀ n → (FinSet ℓ₁ → Type ℓ₂) → *Species′ ℓ₁ ℓ₂ n
Free* n K X with discreteℕ n (card X)
Free* n K X | yes p = K X ⊎ ⊤ , λ p → inr _
Free* n K X | no ¬p = K X , ⊥-rec ∘ ¬p

hUnit* : ∀ n → Species (suc (suc i)) ℓ₁ ℓ₂ → Species (suc (suc i)) ℓ₁ ℓ₂
hUnit* n K = {!!}
